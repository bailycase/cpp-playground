** Building **
im unhappy with how the build system works atm

manually build bgfx and bx and copy the dylib to /usr/local/

** Structure **
Global State contains -
    Controls
    Renderer
    Time
    Sound Engine
    Texture Atlas
    ECS


-- https://devlog.hexops.com/2022/lets-build-ecs-part-1/
-- https://media.handmade-seattle.com/practical-data-oriented-design/
-- https://guide.handmade-seattle.com/c/2021/practical-dod/
** How the ECS works **

An entity is just an index, and we can look-up components assigned to that entity.

-- Entities -- Components -- Systems
Player1         Name: string   Gravity
Player2         Location: vec2 Movement
Player3         Health: int    Damage
Monster1
Monster2

Entities are just a unique integer
Components are just structs of data
Systems are just normal functions

Archetype: a chosen set of components that an entity of a certain type will have

ex:
    player archetype has [name, location, velocity, health]
    a monster might only have [location, health]
    
ECS solves the problem of code structure, that OOP commonly introduces. A heirarchical issue. It can
also bring some good perfomance benefits.


USE DATA ORIENTED DESIGN!

Data oriented design looks like this:

```cpp
    struct Player {
        string name
        Vec2 location
        int health
        bool alive 
    }
    
    struct Monster {
        Vec2 location
        int health
    }
    
    // all our players & monsters
    vector<Player> players
    vector<Monster> monsters 
    
    using Entity = std::uint32_t;
```

Use smart data design.

In the example above, we have an vector of all the players. We have to pay the memory cost for all of the 
players that are dead eg. alive = false.

A better idea is this:
```cpp
    vector<Player> alive_players;
    vector<Player> dead_players;
```

Now we no longer store the alive flag on a player. This reduces the total memory cost. Now when iterating over 
players, we wouldnt have to do a check to see if they are alive or not, since we already know who is dead.







entities are stored in a packed array like so

| 0 | 1 | 2 | 3 | 4 | 5 | 6 |

/*
  theres an array that contains a component id
  using component name as example
  it contains three things
  1. dense array of the entities that have this component
  2. sparse array of the entities that have this component
  3. and a dense array of the component values them self
  "position": [ ]

  it looks like this

  dense: | 0 | 1 | 2
  sparse: | | 2 | 1
  dense: | {1,2} | {1,2}

  to insert a value, we pass the entity id which is just a global index
  then this gets pushed to the next available index in the dense array
  and given whatever its global id is, is the index we insert in the sparse
  array
  

*/
